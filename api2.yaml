swagger: "2.0"
info:
  title: JWT Refresh-Token-NodeJs-MongoDB API
  description: This is an Open Source CRUD API application built with | Nodejs, Express, Redis Mongodb and made with developer experience first; Prettier and VSCode setup available, documented with Swagger
  version: 1.0.0
  termsOfService: http://localhost:5000/terms
  contact:
    name: Fenton Miyare
    url: https://fentonmiyare.herokuapp.com
    email: syosas@gmail.com
  liscence:
    name: MIT
    url: "https://spdx.org/licenses/MIT.html"
  x-logo:
    url: 'https://apis.guru/openapi-template/logo.png'
  servers:
    -url: http://localhost:5000
    description: Development server
    -url: https://api.mysite.com/
    description: Production server
tags:
  - name: auth
    description: Operations about Auth
  - name: admin
    description: Operations about Admin
  - name: user
    description: Everything about your User
  - name: order
    description: Access to orders
schemes: [http, https]

#Return Users From get request
paths:
  /string:
    get:
      summary: Returns a string.
      description: String Chechup
      responses:
        200:    # status code
          description: Successul Response
          schema:
            $ref: '#/components/schemas/Response'
            example:
              data: {}
              success: true
              error: false
              message: "Users String"
              status: 200
        400:
          description: User Error
          schema:
            $ref: '#/components/schemas/Error'
            example:
              data: {}
              success: false
              error: true
              message: "Unauthorized"
              status: 400
              stack: "BadRequestError"
            
  /api/v1/auth/signup:
    post:
      tags:
        - auth
      summary: Authenticate account credentials and return a JWT token and a cookie with a refresh token
      description: Accounts must be verified before authenticating
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required:
          - username
          - email
          - password
          - confirmPassword
      responses:
        201:
          description: User created successfully!
          schema:
            $ref: '#/components/schemas/Response'
            example:
              data: {}
              success: true
              error: false
              message: "Registration successful, please check your email for verification instructions"
              status: 201
        500:
          description: Server Error
          schema:
            $ref: '#/components/schemas/Error'
            example:
              data: {}
              success: false
              error: true
              message: "InternalServerError"
              status: 400
              stack: "InternalServerError"
        409:
          description: User Error
          schema:
            $ref: '#/components/schemas/Error'
            example:
              data: {}
              success: false
              error: true
              message: "Conflict"
              status: 409
              stack: "ConflictError"

  /api/v1/auth/login:
    post:
      tags:
        - auth
      summary: Login a user
      description: Logs in a use in the system
      operationId: loginUser

  /api/v1/auth/signout:
    post:
      tags:
        - auth
      summary: Login a user
      description: Logs in a use in the system
      operationId: loginUser

  /api/v1/auth/refreshtoken:
    post:
      tags:
        - auth
      summary: Use a refresh token to generate a new JWT token and a new refresh token
      description: The refresh token is sent and returned via cookies.
      operationId: refreshToken


  /api/v1/auth/verify-email:
    post:
      tags:
        - auth
      summary: Verify a new account with a verification token received by email after registration
      description: Verifies email address
      operationId: verifyEmail
      requestBody:
      required: true
    content:
      application/json:
        schema:
    

  /api/v1/auth/reset-password:
    post:
      summary: Reset the password for an account
      operationId: resetPassword
      requestBody:
      required: true
    content:
      application/json:
        schema:
  
    post:
      tags:
        - auth
      summary: Login a user
      description: Logs in a use in the system
      operationId: loginUser

# #Returns a User
#   /user:
#     get:
#       summary: Returns a list of users.
#       description: People Who are already registered
#       responses:
#         200:    # status code
#           description: Successul Response
#           schema: 
#             type: object
#             properties:
#               id:
#                 type: integer
#               name:
#                 type: string

# #Returns an array of Users
#   /users:
#     get:
#       summary: Returns a list of users.
#       description: People Who are already registered
#       responses:
#         200:    # status code
#           description: Successul Response
#           schema: 
#             type: array
#             items: 
#               type: object
#               properties:
#                 id:
#                   type: integer
#                 name:
#                   type: string


# #Get Request with path id
#   /users/{userId}:
#     get:
#       summary: Returns a user by ID.
#       description: Returns the Specific User
#       parameters:
#         - name: userId
#           in: path
#           required: true
#           schema:
#             type : integer
#             format: int64
#       responses: 
#         '200':
#           description: OK
#           schema:
#             type: object
#             example: {name: syed}

# #Post json/body & Body required
#   # /create:
#   #   post:
#   #     summary: Adds a new user
#   #     produces:
#   #       - application/json
#   #     consumes:
#   #       - application/json
#   #     parameters:
#   #       - in: body
#   #         name: body
#   #         schema:
#   #           type: object
#   #           required:
#   #             - name
#   #             - id
#   #           properties:
#   #             id:
#   #               type: integer
#   #             name:
#   #               type: string
#   #     responses:
#   #       '200':
#   #         description: OK


# #Defining Body Reference
#   /create:
#     post:
#       summary: Adds a new user
#       produces:
#         - application/json
#       consumes:
#         - application/json
#       parameters:
#         - in: body
#           name: body
#           schema:
#            $ref: "#/components/schemas/User"
#       responses:
#         '200':
#           description: OK


# #Query
# #Get Query
#   /usersQuery:
#     get:
#       summary: Returns a user by ID.
#       description: Returns the Specific User
#       parameters:
#         - in: query
#           name: id
#           type: integer
#           enum: [1, 2]
#           required: true
#         # - in: query
#         #   name: id
#         #   type: integer
#         #   enum: [1, 2]
#         #   required: true
#       responses: 
#         '200':
#           description: OK
#           schema:
#             type: object
#             example: {name: syed,id: 21}



# #File Upload Multiform Data
#   /upload:
#     post:
#       tags:
#         - Upload
#       summary: Upload Video/Image for Inferring
#       consumes:
#         - multipart/form-data
#       parameters:
#         - in: formData
#           name: file
#           type: file
#           required: true
#           description: The file to upload.
#         # - in: formData
#         #   name: app
#         #   type: string
#         #   required: true
#         #   description: Name of the model.
#         # - in: formData
#         #   name: id
#         #   type: string
#         #   required: true
#         #   description: Some random Id.
#       responses:
#         200:
#           description: Successful Response
#         400:
#           description: User Error
#         500:
#           description: Internal Server Error


# #In Headers
#   /string:
#     get:
#       summary: Checks if the server is alive
#       parameters:
#         - in: header
#           name: X-Request-ID
#           schema:
#             type: string
#             format: uuid
#           required: true
#       responses:
#         200:
#           description: Successful Response
#         400:
#           description: User Error
#         500:
#           description: Internal Server Error

# #Cokies
#   # /ping:
#   #   get:
#   #     summary: Checks if the server is alive
#   #     parameters:
#   #       - in: cookie
#   #         name: debug
#   #         schema:
#   #           type: integer
#   #           enum: [0, 1]
#   #           default: 0
#   #       - in: cookie
#   #         name: csrftoken
#   #         schema:
#   #           type: string


components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  schemas:
    User:
      title: a User
      description: A User who is subscribing to the writing services
      type: object
      required:
        - username
        - email
        - password
        - confirmPassword
      properties:
        username:
          type: string
          example: JohnWick
        email:
          type: string
          example: john.wick@email.com
        password:
          type: string
          description: unencrypted user's password
          example: r!1234aWe1Ro3$#
        confirmPassword:
          type: string
          description: unencrypted user's password
          example: r!1234aWe1Ro3$#
        roles:
          type: array
            items: string
          example: ['user']
      xml:
        name: User
    Order:
      title: Pet Order
      description: An order for a pets from the pet store
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Response:            # Can be referenced as '#/components/schemas/Response'
      type: object
      properties:
        data:
          type: object
          description: response object
        success:
          type: boolean
          description: return true if success otherwise false
        error:
          type: boolean
          description: returns true if error otherwise false
        message:
          type: string
          description: information
        status:
          type: number
    Error:            # Can be referenced as '#/components/schemas/Error'
      title: An Error Response
      description: An error for invalid requests
      type: object
      properties:
        data:
          type: object
          description: response object
        success:
          type: boolean
          description: return true if success otherwise false
        error:
          type: boolean
          description: returns true if error otherwise false
        message:
          type: string
          description: information
        status:
          type: number
        stack:
          type: string